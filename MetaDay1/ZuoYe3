// SPDX-License-Identifier: MIT
pragma solidity ^0.8;

contract ZuoYe3 {
    function uintToLuoMa(uint32 num) public  pure returns (string memory str) {
    // function uintToLuoMa(uint num) public  pure returns (uint num2, uint num3, uint num4, uint num5) {
        require(num > 0 && num <= 3999 , "Number must be between 1 and 3999");

        uint32 thousand = num / 1000;
        uint32 hundred = (num % 1000) / 100;
        uint32 ten = (num % 100) / 10;
        uint32 one = num % 10;

        string[] memory thousand_li = new string[](4);
        string[] memory hundred_li = new string[](10);
        string[] memory ten_li = new string[](10);
        string[] memory one_li = new string[](10);

        thousand_li[0] = "";
        thousand_li[1] = "M";
        thousand_li[2] = "MM";
        thousand_li[3] = "MMM";

        hundred_li[0]="";
        hundred_li[1]="C";
        hundred_li[2]="CC";
        hundred_li[3]="CC";
        hundred_li[4]="CD";
        hundred_li[5]="D";
        hundred_li[6]="DC";
        hundred_li[7]="DCC";
        hundred_li[8]="DCCC";
        hundred_li[9]="CM";

        ten_li[0]="";
        ten_li[1]="X";
        ten_li[2]="XX";
        ten_li[3]="XXX";
        ten_li[4]="XL";
        ten_li[5]="L";
        ten_li[6]="LX";
        ten_li[7]="LXX";
        ten_li[8]="LXXX";
        ten_li[9]="XC";

        one_li[0]="";
        one_li[1]="I";
        one_li[2]="I";
        one_li[3]="III";
        one_li[4]="IV";
        one_li[5]="V";
        one_li[6]="VI";
        one_li[7]="VII";
        one_li[8]="VIII";
        one_li[9]="IX";

        bytes memory ret_bytes = abi.encodePacked(
            thousand_li[thousand],
            hundred_li[hundred],
            ten_li[ten],
            one_li[one]
        );

        return string(ret_bytes);
    }
}

